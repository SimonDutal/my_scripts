#!/usr/bin/env python3

import sys
import os
import time

# Reset
Color_Off='\033[0m'       # Text Reset
# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White
# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White
# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White
# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White
# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

flag_help = False
flag_quiet = False
flag_verbose = False
flag_debug = False
flag_all = False
flag_loop = False
exclude_list = {".gcno", ".gcda", ".o", ".a"}
refresh_delay = 10

args = sys.argv[1:]
for i in (args):
    if (i == '-h' or i == '--help'):
        flag_help = True
    elif (i == '-q' or i == '--quiet'):
        flag_quiet = True
    elif (i == '-v' or i == '--verbose'):
        flag_verbose = True
    elif (i == '-d' or i == '--debug'):
        flag_debug = True
    elif (i == '-a' or i == '--all'):
        flag_all = True
    elif (i == '-l' or i == '--loop'):
        flag_loop = True
    try:
        refresh_delay = int(i)
    except:
        refresh_delay += 0 #very usefull except here
        
if (flag_verbose):
    flag_quiet = False

if (flag_help):
    print("Usage : CSAR [OPTION]")
    print("Automatically run coding style checks and display them in a legible way.")
    print("flag list:")
    print("  -a, --all             do not ingore common error souce files such a \".gcda\" or \".a\" files.")
    print("  -d, --debug           debug mode.")
    print("  -h, --help            display this help and exit instead of the normal function.")
    print("  -l, --loop            constantly update the report instead of quitting.")
    print("  -q, --quiet           say less things.")
    print("  -v, --verbose         say more things.")
    print("  [ANY INTEGER]         the refresh delay when looping in seconds (default is 5).")
    print("use \"CSAR -l -a -v 1\" to have the classic function")
    exit(0)

if (flag_loop):
    os.system('clear')

while True:
    nfatal = 0
    nmajor = 0
    nminor = 0
    ninfo = 0
    ntotal = 0

    if (flag_debug):
        print(refresh_delay)
    
    if (not flag_quiet):
        if (flag_loop):
            print(Color_Off + "Refreshing ..." + Black)
        else:
            print(Color_Off + "Refreshing ...")
    else:
        print(Black)
    os.system("coding-style .")
    os.system("~/my_scripts/report_helper ")
    if (flag_loop):
        os.system("clear")
    if (not flag_quiet):
        if (not flag_all):
            print(Color_Off + "coding style report :" + Yellow + "                     (Errors coming from .gcda or .a files, etc are ignored)" + Color_Off)
        else:
            print(Color_Off + "coding style report :")

    with open("coding-style-reports.log", "r") as file:
        for line in file:
            if (not any(x in line for x in exclude_list) or flag_all):
                if "FATAL" in line:
                    print(Red + line, end = "")
                    nfatal += 1
                elif "MAJOR" in line:
                    print(Red + line, end = "")
                    nmajor += 1
                elif "MINOR" in line:
                    print(IYellow + line, end = "")
                    nminor += 1
                elif "INFO" in line:
                    print(Cyan + line, end = "")
                    ninfo += 1
                else:
                    print(Color_Off + line, end = "")

    if (not flag_quiet):
        ntotal = nfatal + nmajor + nminor + ninfo
        print(Color_Off + "you have " + IRed + str(nfatal) + " FATALs" + Color_Off + ", " + Red + str(nmajor) +  " MAJORs" + Color_Off + ", " + IYellow + str(nminor) + " MINORs" + Color_Off + ", " + Cyan + str(ninfo) + " INFOs" + Color_Off + ", " + str(ntotal) + " total.", end = "")
        if (flag_verbose):
            if (nfatal >= 1 or nmajor >= 1 or nminor >= 3):
                print(" The tests " + Red + "won't pass.")
            else:
                print(" The tests " + Green + "should pass.")
        else:
            print()

    if (not flag_loop):
        break
    time.sleep(refresh_delay)
