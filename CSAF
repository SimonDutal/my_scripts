#!/usr/bin/env python3

#Codinng Style Auto Fixer

import sys
import os

# Reset
Color_Off='\033[0m'       # Text Reset
# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White
# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White
# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White
# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White
# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White
# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

flag_help = False
flag_quiet = False
flag_verbose = False
flag_debug = False
flag_recursive = False
flag_manual_target = False
flag_return_value = False
flag_count = False
target_list = []
target_dir_list = []
tfatal = 0
tmajor = 0
tminor = 0
tinfo = 0
ttotal = 0

args = sys.argv[1:]
for i in (args):
    if (i[0] == '-' and i[1] != '-'):
        if 'h' in i:
            flag_help = True
        if 'q' in i:
            flag_quiet = True
        if 'v' in i:
            flag_verbose = True
        if 'd' in i:
            flag_debug = True
        if 'r' in i:
            flag_recursive = True
        if 'c' in i:
            flag_count = True
    elif (i == '--help'):
        flag_help = True
    elif (i == '--quiet'):
        flag_quiet = True
    elif (i == '--verbose'):
        flag_verbose = True
    elif (i == '--debug'):
        flag_debug = True
    elif (i == '--recursive'):
        flag_recursive = True
    elif (i == '--return-value'):
        flag_return_value = True
    elif (i == '--count'):
        flag_count = True
    else: #if its no a flag its a target
        target_list.append(i)
        flag_manual_target = True

if (flag_verbose):
    flag_quiet = False

if (flag_help):
    print("Usage : CSAF [OPTION]... [TARGET]...")
    print("Coding Style Auto Fixer: automatically fix some coding style errors.")
    print("options list:")
    print("  -c, --count           only count errors and dont fix them.")
    print("  -d, --debug           debug mode.")
    print("  -h, --help            display this help and exit instead of the normal function.")
    print("  -q, --quiet           say less things.")
    print("  -r, --recursive       work in directories and their contents recursively.")
    print("      --return-value    return the number of fixed/found errors instead of 0.")
    print("  -v, --verbose         say more things.")
    print("  [TARGET]              target (such as main.c) or directories (such as src).")
    #print("use \"CSAR -l -a -v 1\" to have the classic function") #imma remake this for CSAF at some point
    exit(0)

if (flag_debug):
    print("DEBUG mode active")

if (not flag_quiet):
    print(Color_Off + "scanning ...")

for i in range(len(target_list)-1, -1, -1):
    if (os.path.isdir(target_list[i])):
        target_dir_list.append(target_list[i])
        target_list.pop(i)
        continue
    if (not target_list[i].endswith(".c")):
        if (not flag_quiet):
            print("\""+target_list[i]+"\" is not a valid target.")
        target_list.pop(i)
        continue
    if (not os.path.exists(target_list[i])):
        if (not flag_quiet):
            print("\""+target_list[i]+"\" does not exist.")
        target_list.pop(i)
        continue
    
if (len(target_list) == 0 and flag_manual_target == False): #if no target specified we scan all valid files in current folder
    target_list = os.listdir(".")
    for i in range(len(target_list)-1, -1, -1):
        if (os.path.isdir(target_list[i])):
            target_dir_list.append(target_list[i]) #we do need this
            target_list.pop(i)
            continue
        if (not target_list[i].endswith(".c")):
            target_list.pop(i)
            continue
        if (not os.path.exists(target_list[i])):
            target_list.pop(i)
            continue

while(i < len(target_dir_list) and (flag_manual_target or flag_recursive)):
    target_list += [target_dir_list[i]+"/"+x for x in os.listdir(target_dir_list[i])]
    for j in range(len(target_list)-1, -1, -1):
        if (os.path.isdir(target_list[j])):
            if (flag_recursive):
                target_dir_list.append(target_list[j])
            target_list.pop(j)
            continue
        if (not target_list[j].endswith(".c")):
            target_list.pop(j)
            continue
        if (not os.path.exists(target_list[j])):
            target_list.pop(j)
            continue
    i = i + 1

if (flag_debug):
    print("DEBUG:target list:"+str(target_list))
    print("DEBUG:target dir list:"+str(target_dir_list))

if (len(target_list) == 0):
    print("found nothing, are you sure you did it right? use CSAF -h.")
    exit(0)

#for each target
for j in range(len(target_list)):
    nfatal = 0
    nmajor = 0
    nminor = 0
    ninfo = 0
    in_single_line_comment = False
    in_multi_line_comment = False
    string_lenght = -1
    in_string = False
    in_char = False
    in_preprocessor = False
    in_tab = False
    tab_len = 0

    #display info
    if (not flag_quiet):
        if (len(target_list[j]) > 38):
            print(f'{"..."+target_list[j][-35:]+":": <40}', end = "")
        else:
            print(f'{target_list[j]+":": <40}', end = "")

    #read file
    file = open(os.getcwd() + "/" + target_list[j], "r")
    buff = file.read()
    file.close()

    if (flag_debug):
        print("\nDEBUG:printing the file:")

    i = 0
    #parsing the file
    while (i < len(buff)):
        if (in_string or in_char):
            string_lenght = string_lenght + 1

        #strings detection
        if ((buff[i] == '"') and buff[i-1] != '\\' and not in_string and not in_single_line_comment and not in_multi_line_comment and not in_preprocessor and not in_char): #string start
            in_string = True
            string_lenght = 0
        if ((buff[i-1] == '"') and string_lenght > 1 and buff[i-1] != '\\' and in_string and not in_single_line_comment and not in_multi_line_comment and not in_preprocessor and not in_char): #tring end
            in_string = False
            string_lenght = 0
        #char detection
        if ((buff[i] == '\'') and buff[i-1] != '\\' and not in_string and not in_single_line_comment and not in_multi_line_comment and not in_preprocessor and not in_char):
            in_char = True
            string_lenght = 0
        if ((buff[i-1] == '\'') and string_lenght > 1 and buff[i-1] != '\\' and not in_string and not in_single_line_comment and not in_multi_line_comment and not in_preprocessor and in_char):
            in_char = False
            string_lenght = 0
        #single line comment detection
        if ((buff[i] == '/' and buff[i+1] == '/') and not in_single_line_comment and not in_multi_line_comment and not in_string and not in_preprocessor and not in_char):
            in_single_line_comment = True
        elif ((buff[i] == '\n') and in_single_line_comment and not in_multi_line_comment and not in_string and not in_preprocessor and not in_char):
            in_single_line_comment = False
        #multi line comment detection
        if ((buff[i] == '/' and buff[i+1] == '*') and not in_multi_line_comment and not in_single_line_comment and not in_string and not in_preprocessor and not in_char):
            in_multi_line_comment = True
        elif ((buff[i-2] == '*' and buff[i-1] == '/') and in_multi_line_comment and not in_single_line_comment and not in_string and not in_preprocessor and not in_char):
            in_multi_line_comment = False
        #preporcessor directive detection
        if ((buff[i-1] == '\n' and buff[i] == '#') and not in_multi_line_comment and not in_single_line_comment and not in_string and not in_preprocessor and not in_char):
            in_preprocessor = True
        elif ((buff[i] == '\n') and not in_multi_line_comment and not in_single_line_comment and not in_string and in_preprocessor and not in_char):
            in_preprocessor = False

        #G1 file header
        if (i == 0 and not (buff[i] == '/' and buff[i+1] == '*')):
            if (not flag_count):
                buff = "/*\n** EPITECH PROJECT, 2024\n** NAME\n** File description:\n** DESCRIPTION\n*/\n" + buff
                in_multi_line_comment = True
            nminor += 1
        
        #code fixing logic here
        if (not (in_string or in_single_line_comment or in_multi_line_comment or in_preprocessor or in_char)):
            #L2 tabs
            if (buff[i] == '\t'):
                if (not flag_count):
                    buff = buff[:i] + '        ' + buff[i+1:]
                nminor = nminor + 1
            if (buff[i] == '\n'):
                in_tab = True
                tab_len = 0
            elif (buff[i] != ' ' and in_tab):
                in_tab = False
                if (tab_len % 4 != 0):
                    if (not flag_count):
                        buff = buff[:i] + ' '*(4 - tab_len % 4) + buff[i:]
                    nminor = nminor + 1
            elif (buff[i] == ' ' and in_tab):
                tab_len += 1

            #more TODO (amount of spaces)
            #L3 spaces
            # = sign, assignement and (in)equality test (and increment assignement) (and greater than or equal)
            if (buff[i] == '='):
                if (not (buff[i+1] == '=' or buff[i+1] == ' ')):
                    if (not flag_count):
                        buff = buff[:i+1] + ' ' + buff[i+1:]
                    nminor = nminor + 1
                if (not (buff[i-1] == '=' or buff[i-1] == ' ' or buff[i-1] == '!' or buff[i-1] == '+' or buff[i-1] == '-' or buff[i-1] == '<' or buff[i-1] == '>')):
                    if (not flag_count):
                        buff = buff[:i] + ' ' + buff[i:]
                    nminor = nminor + 1
            # * sign, multiplication and pointer derefencing
            if (buff[i] == '*'):
                #TODO : need to find a way to differenciate between multiplication and pointer deref
                if (buff[i-1] != ' ' and buff[i-1] != '*' and buff[i-1] != '(' and buff[i+1] != ')'):
                    if (not flag_count):
                        buff = buff[:i] + ' ' + buff[i:]
                    nminor = nminor + 1
            # % sign, modulosisation
            if (buff[i] == '%'):
                if (buff[i+1] != ' '):
                    if (not flag_count):
                        buff = buff[:i+1] + ' ' + buff[i+1:]
                    nminor = nminor + 1
                if (buff[i-1] != ' '):
                    if (not flag_count):
                        buff = buff[:i] + ' ' + buff[i:]
                    nminor = nminor + 1
            # / sign, division
            if (buff[i] == '/'):
                if (buff[i+1] != ' ' and buff[i+1] != '='):
                    if (not flag_count):
                        buff = buff[:i+1] + ' ' + buff[i+1:]
                    nminor = nminor + 1
                if (buff[i-1] != ' '):
                    if (not flag_count):
                        buff = buff[:i] + ' ' + buff[i:]
                    nminor = nminor + 1          
            # + sign, addition and incrementation
            if (buff[i] == '+'):
                if (not (buff[i+1] == '+' or buff[i+1] == ';' or buff[i+1] == ')' or buff[i+1] == ' ' or buff[i+1] == '=')): 
                    if (not flag_count):
                        buff = buff[:i+1] + ' ' + buff[i+1:]
                    nminor = nminor + 1
                if (not (buff[i-1] == '+' or buff[i-1] == ' ') and buff[i+1] != '+'):
                    if (not flag_count):
                        buff = buff[:i] + ' ' + buff[i:]
                    nminor = nminor + 1
                if (buff[i-1] == ' ' and buff[i+1] == '+'):
                    if (not flag_count):
                        buff = buff[:i-1] + buff[i:]
                        i -= 1
                    nminor = nminor + 1
            # - sign, substraction and decrementation (no struct deref) (negative numbers)
            if (buff[i] == '-' and buff[i+1] != '>'):
                #if (not (buff[i+1] == '-' or buff[i+1] == ';' or buff[i+1] == ')' or buff[i+1] == ' ' or buff[i+1] == '=')):
                #    if (not flag_count):
                #        buff = buff[:i+1] + ' ' + buff[i+1:]
                #    nminor = nminor + 1
                if (not (buff[i-1] == '-' or buff[i-1] == ' ' or buff[i-1] == '(') and buff[i+1] != '-'):
                    if (not flag_count):
                        buff = buff[:i] + ' ' + buff[i:]
                    nminor = nminor + 1
                if (buff[i-1] == ' ' and buff[i+1] == '-'):
                    if (not flag_count):
                        buff = buff[:i-1] + buff[i:]
                        i -= 1
                    nminor = nminor + 1
            # , sign, comma
            if (buff[i] == ','):
                if (buff[i+1] != ' ' and buff[i+1] != '\n'):
                    if (not flag_count):
                        buff = buff[:i+1] + ' ' + buff[i+1:]
                    nminor = nminor + 1
                if (buff[i-1] == ' '):
                    if (not flag_count):
                        buff = buff[:i-1] + buff[i:]
                    nminor = nminor + 1
            # ; sign ,end of statement (and for loops)
            if (buff[i] == ';'):
                if (buff[i-1] == ' '):
                    if (not flag_count):
                        buff = buff[:i-1] + buff[i:]
                        i -= 1
                    nminor = nminor + 1
            # (
            if (buff[i] == '('):
                if (buff[i+1] == ' '):
                    if (not flag_count):
                        buff = buff[:i+1] + buff[i+2:]
                    nminor = nminor + 1
            # )
            if (buff[i] == ')'):
                if (buff[i-1] == ' '):
                    if (not flag_count):
                        buff = buff[:i-1] + buff[i:]
                    nminor = nminor + 1
            #correct amount of spaces
            if ((buff[i] == ' ' and buff[i+1] == ' ') and not in_tab):
                if (not flag_count):
                    buff = buff[:i] + buff[i+1:]
                nminor = nminor + 1
            
            #G7 trailing spaces
            if (buff[i-1] == ' ' and buff[i] == '\n'):
                if (not flag_count):
                    while (buff[i-1] == ' '):
                        buff = buff[:i-1] + buff[i:]
                        i -= 1
                nminor = nminor + 1
            
            #G8 leading/trailing lines
            #leading
            if (i == 0 and buff[i] == '\n'):
                nminor += 1
                if (not flag_count):
                    buff = buff[i+1:]
                    continue
            #trailing
            if (i == len(buff)-1 and buff[i-1] == '\n' and buff[i] == '\n'):
                if (not flag_count):
                    buff = buff[:i]
                    i -= 1
                nminor += 1
                
            #L1 line code content
            #L6 blank lines
            #F6 function without params
            #L4 curly brackets
            
        #debug print file
        if (flag_debug):
            if (in_single_line_comment):
                print(Red,end="")
            elif (in_multi_line_comment):
                print(IRed,end="")
            elif (in_string or in_char):
                print(Yellow,end="")
            elif (in_tab):
                print(Green,end="")
            else:
                print(Color_Off,end="")
            print(buff[i],end="")

        i = i + 1
    #end of text parsing loop
            
    ntotal = nfatal + nmajor + nminor + ninfo

    #write to file
    if (ntotal != 0):
        file = open(os.getcwd() + "/" + target_list[j], "w")
        file.write(buff)
        file.close()

    #display info
    if (not flag_quiet):
        if (flag_count):
            print(Color_Off+"counted", end = "")
        else:
            print(Color_Off+"  fixed", end = "")
        if (nfatal != 0):
            print(IRed,end="")
        else:
            print(Color_Off,end="")
        print(f"{nfatal:>3}"+" FATALs"+Color_Off+",",end="")
        if (nmajor != 0):
            print(Red,end="")
        else:
            print(Color_Off,end="")
        print(f"{nmajor:>3}"+" MAJORs"+Color_Off+",",end="")
        if (nminor != 0):
            print(IYellow,end="")
        else:
            print(Color_Off,end="")
        print(f"{nminor:>3}"+" MINORs"+Color_Off+",",end="")
        if (ninfo != 0):
            print(Cyan,end="")
        else:
            print(Color_Off,end="")
        print(f"{ninfo:>3}"+" INFOs"+Color_Off+",",end="")
        print(Color_Off+f"{ntotal:>3}"+" total.")
    tfatal += nfatal
    tmajor += nmajor
    tminor += nminor
    tinfo +=  ninfo
    ttotal += ntotal

#end of files loop

if (flag_verbose):
    print(Color_Off+"╶──────────────────────────────────────────────────────────────────────────────────────────────────╴")
    print(Color_Off+"                                          total"+IRed+f"{tfatal:>3}"+" FATALs"+Color_Off+","+Red+f"{tmajor:>3}"+" MAJORs"+Color_Off+","+IYellow+f"{tminor:>3}"+" MINORs"+Color_Off+","+Cyan+f"{tinfo:>3}"+" INFOs"+Color_Off+","+f"{ttotal:>3}"+" total.")

if (flag_return_value == True):
    exit(ttotal)


    #L2
    #L3
    #G7
    #G8
    #L1 partiellement
    #L6
    #F6
    #G1 partiellement
    #L4 partiellement
