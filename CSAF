#!/usr/bin/env python3

#!/usr/bin/env python3

#Codinng Style Auto Reporter

import sys
import os
import time

# Reset
Color_Off='\033[0m'       # Text Reset
# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White
# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White
# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White
# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White
# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White
# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

flag_help = False
flag_quiet = False
flag_verbose = False
flag_debug = False
flag_recursive = False
flag_manual_target = False
target_list = []

args = sys.argv[1:]
for i in (args):
    if (i[0] == '-' and i[1] != '-'):
        if 'h' in i:
            flag_help = True
        if 'q' in i:
            flag_quiet = True
        if 'v' in i:
            flag_verbose = True
        if 'd' in i:
            flag_debug = True
        if 'r' in i:
            flag_recursive = True
    elif (i == '--help'):
        flag_help = True
    elif (i == '--quiet'):
        flag_quiet = True
    elif (i == '--verbose'):
        flag_verbose = True
    elif (i == '--debug'):
        flag_debug = True
    elif (i == '--recursive'):
        flag_recursive = True
    else: #if its no a flag its a target
        target_list.append(i)
        flag_manual_target = True

if (flag_verbose):
    flag_quiet = False

if (flag_help):
    print("Usage : CSAF [OPTION] [TARGET]")
    print("Coding Style Auto Fixer: automatically fix some coding style errors.")
    print("flag list:")
    print("  -d, --debug           debug mode.")
    print("  -h, --help            display this help and exit instead of the normal function.")
    print("  -q, --quiet           say less things.")
    print("  -r, --recursive       work in directories and their contents recursively.")
    print("  -v, --verbose         say more things.")
    print("  [TARGET]              target (such as main.c) or entire directories (such as src)")
    #print("use \"CSAR -l -a -v 1\" to have the classic function") #imma remake this at some point
    exit(0)

for i in range(len(target_list)-1, -1, -1):
    if (not target_list[i].endswith(".c") and not os.path.isdir(target_list[i])):
        print("\""+target_list[i]+"\" is not a valid target.")
        target_list.pop(i)
        continue
    if (not os.path.exists(target_list[i])):
        print("\""+target_list[i]+"\" does not exist.")
        target_list.pop(i)
        continue
        
if (len(target_list) == 0 and flag_manual_target == False): #if no target specified we scan all valid files in current folder
    target_list = os.listdir(".")
        
print(str(target_list))

